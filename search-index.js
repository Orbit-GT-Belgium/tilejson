var N=null,E="",T="t",U="u",searchIndex={};
var R=["tilejson","TileJSON","tilejsonbuilder","description","version","attribution","template","legend","scheme","minzoom","try_from","try_into","borrow_mut","result","formatter","serialize","deserialize","TileJSONBuilder"];

searchIndex["tilejson"]={"doc":R[1],"i":[[0,R[0],R[0],E,N,N],[3,R[1],"tilejson::tilejson","TileJSON struct that represents map metadata",N,N],[12,R[0],E,"A semver.org style version number. Describes the version…",0,N],[12,"id",E,"The tileset id.",0,N],[12,"name",E,"A name describing the tileset. The name can contain any…",0,N],[12,R[3],E,"A text description of the tileset. The description can…",0,N],[12,R[4],E,"A semver.org style version number. When changes across…",0,N],[12,R[5],E,"Contains an attribution to be displayed when the map is…",0,N],[12,R[6],E,"Contains a mustache template to be used to format data…",0,N],[12,R[7],E,"Contains a legend to be displayed with the map.…",0,N],[12,R[8],E,"Either \"xyz\" or \"tms\". Influences the y direction of the…",0,N],[12,"tiles",E,"An array of tile endpoints. {z}, {x} and {y}, if present,…",0,N],[12,"grids",E,"An array of interactivity endpoints. {z}, {x} and {y}, if…",0,N],[12,"data",E,"An array of data files in GeoJSON format. {z}, {x} and…",0,N],[12,R[9],E,"An integer specifying the minimum zoom level.",0,N],[12,"maxzoom",E,"An integer specifying the maximum zoom level. MUST be >=…",0,N],[12,"bounds",E,"The maximum extent of available map tiles. Bounds MUST…",0,N],[12,"center",E,"The first value is the longitude, the second is latitude…",0,N],[3,R[17],E,E,N,N],[11,"new",E,E,1,[[],[R[2]]]],[11,"id",E,E,1,[[["self"],["str"]],[R[2]]]],[11,"name",E,E,1,[[["self"],["str"]],[R[2]]]],[11,R[3],E,E,1,[[["self"],["str"]],[R[2]]]],[11,R[4],E,E,1,[[["self"],["str"]],[R[2]]]],[11,R[5],E,E,1,[[["self"],["str"]],[R[2]]]],[11,R[6],E,E,1,[[["self"],["str"]],[R[2]]]],[11,R[7],E,E,1,[[["self"],["str"]],[R[2]]]],[11,R[8],E,E,1,[[["self"],["str"]],[R[2]]]],[11,"tiles",E,E,1,[[["self"],["vec",["str"]],["str"]],[R[2]]]],[11,"grids",E,E,1,[[["self"],["vec",["str"]],["str"]],[R[2]]]],[11,"data",E,E,1,[[["self"],["vec",["str"]],["str"]],[R[2]]]],[11,R[9],E,E,1,[[["self"],["u8"]],[R[2]]]],[11,"maxzoom",E,E,1,[[["self"],["u8"]],[R[2]]]],[11,"bounds",E,E,1,[[["self"],["vec",["i32"]],["i32"]],[R[2]]]],[11,"center",E,E,1,[[["self"],["vec",["i32"]],["i32"]],[R[2]]]],[11,"finalize",E,E,1,[[],[R[0]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[10],E,E,0,[[[U]],[R[13]]]],[11,R[11],E,E,0,[[],[R[13]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[10],E,E,1,[[[U]],[R[13]]]],[11,R[11],E,E,1,[[],[R[13]]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,"type_id",E,E,1,[[["self"]],["typeid"]]],[11,"eq",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[14]]],[R[13]]]],[11,"fmt",E,E,1,[[["self"],[R[14]]],[R[13]]]],[11,R[15],E,E,0,[[["self"],["__s"]],[R[13]]]],[11,R[15],E,E,1,[[["self"],["__s"]],[R[13]]]],[11,R[16],E,E,0,[[["__d"]],[R[13]]]],[11,R[16],E,E,1,[[["__d"]],[R[13]]]]],"p":[[3,R[1]],[3,R[17]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);